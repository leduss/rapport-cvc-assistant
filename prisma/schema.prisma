generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  reports   Report[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  client      String
  address     String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      ProjectStatus @default(ACTIVE)
  progress    Int
  reportsCount Int
  nextIntervention DateTime
  priority    ProjectPriority

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  reports     Report[]
  equipments  Equipment[]
}

model Report {
  id                String          @id @default(cuid())
  title             String
  reportNumber      String?         @unique
  date              DateTime        @default(now())
  weatherConditions String?
  ambientTemp       Float?
  notes             String?
  status            ReportStatus    @default(DRAFT)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  projectId         String
  equipmentTests    EquipmentTest[]
  project           Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Equipment {
  id             String          @id @default(cuid())
  name           String
  type           EquipmentType
  brand          String?
  model          String?
  serialNumber   String?
  location       String?
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String
  equipmentTests EquipmentTest[]
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("equipments")
}

model EquipmentTest {
  id          String     @id @default(cuid())
  testDate    DateTime   @default(now())
  testType    String
  results     Json
  comments    String?
  status      TestStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  equipmentId String
  reportId    String
  equipment   Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  report      Report     @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("equipment_tests")
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  template    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("report_templates")
}

model TechnicalReference {
  id          String   @id @default(cuid())
  title       String
  reference   String
  description String?
  category    String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("technical_references")
}

enum EquipmentType {
  CTA
  AEROTHERME
  THERMOSTAT
  POMPE
  VENTILATEUR
  ECHANGEUR
  FILTRE
  RESEAU_AERAULIQUE
  RESEAU_HYDRAULIQUE
  AUTRE
}

enum ReportStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  VALIDATED
  ARCHIVED
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  REQUIRES_ATTENTION
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PLANNED
  ON_HOLD
  ARCHIVED
}

enum ProjectPriority {
  LOW
  NORMAL
  HIGH
}
